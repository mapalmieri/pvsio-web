/**
 * In this file there are the implementations
 * of the fuctions declared in fmu.h
 * along with the data needed.
 */
#include "fmu.h"
#include "misraC/{{modelName}}.h"

State st;

void initialize(const char* location) {
    init(&st);{{#each variables}}{{#if fmi}}{{#if output}}{{#if real}}
    fmiBuffer.realBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if int}}
    fmiBuffer.intBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if bool}}
    fmiBuffer.booleanBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if string}}
    fmiBuffer.stringBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}
}

/**
 * This function exchanges messages with the PVSio process
 * Received messages are saved in the variable state
 */
void doStep(const char* action) { {{#each variables}}{{#if fmi}}{{#if input}}{{#if real}}
    st.{{name}} = fmiBuffer.realBuffer[{{fmi.valueReference}}];{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if input}}{{#if int}}
	st.{{name}} = fmiBuffer.intBuffer[{{fmi.valueReference}}];{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if input}}{{#if bool}}
	st.{{name}} = fmiBuffer.booleanBuffer[{{fmi.valueReference}}];{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if input}}{{#if string}}
	st.{{name}} = fmiBuffer.stringBuffer[{{fmi.valueReference}}];{{/if}}{{/if}}{{/if}}{{/each}}
    tick(&st);{{#each variables}}{{#if fmi}}{{#if output}}{{#if real}}
    fmiBuffer.realBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if int}}
    fmiBuffer.intBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if bool}}
    fmiBuffer.booleanBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if string}}
    fmiBuffer.stringBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}
}

void terminate(){ }
