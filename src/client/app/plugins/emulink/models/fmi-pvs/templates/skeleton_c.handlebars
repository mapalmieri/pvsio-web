/*! \file skeleton.c 
 * In this file there are the implementations
 * of the fuctions declared in fmu.h
 * along with the data needed.
 */
#include "fmu.h"
#include "misraC/{{modelName}}.h"

State st; /*!< structure containing the state of the model */
int first = 0;

 /**
       * function for the initialization of the model.
       * It calls the init function of the model and
       * 	sets the output
       * @param location is the directory where the fmu has been unzipped. Might be used in future version
       * 
       */
void initialize(const char* location) {
    init(&st);{{#each variables}}{{#if fmi}}{{#if output}}{{#if real}}
    fmiBuffer.realBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if int}}
    fmiBuffer.intBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if bool}}
    fmiBuffer.booleanBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if string}}
    fmiBuffer.stringBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}
    
    
}

/**
 * function that performs a step of the simulation model.
 * At first the inputs of the are updated with the values fom the master algorithm
 * Then the tick function is called
 * Finally the outputs of the model are forwarded to the master algorithm 
 * @param action is the action to perform. Might be used in future version
 */
void doStep(const char* action) { 
if(first == 0){
{{#each variables}}{{#if fmi}}{{#if parameter}}{{#if real}}
    st.{{name}} = fmiBuffer.realBuffer[{{fmi.valueReference}}] ;{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if int}}
    st.{{name}} = fmiBuffer.intBuffer[{{fmi.valueReference}}] ;{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if bool}}
    st.{{name}} = fmiBuffer.booleanBuffer[{{fmi.valueReference}}] ;{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if string}}
    st.{{name}} = fmiBuffer.stringBuffer[{{fmi.valueReference}}] ;{{/if}}{{/if}}{{/if}}{{/each}}
    
    first = 1;
}
	{{#each variables}}{{#if fmi}}{{#if input}}{{#if real}}
    st.{{name}} = fmiBuffer.realBuffer[{{fmi.valueReference}}];{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if input}}{{#if int}}
	st.{{name}} = fmiBuffer.intBuffer[{{fmi.valueReference}}];{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if input}}{{#if bool}}
	st.{{name}} = fmiBuffer.booleanBuffer[{{fmi.valueReference}}];{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if input}}{{#if string}}
	st.{{name}} = fmiBuffer.stringBuffer[{{fmi.valueReference}}];{{/if}}{{/if}}{{/if}}{{/each}}
	
    tick(&st);
    
    {{#each variables}}{{#if fmi}}{{#if output}}{{#if real}}
    fmiBuffer.realBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if int}}
    fmiBuffer.intBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if bool}}
    fmiBuffer.booleanBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if output}}{{#if string}}
    fmiBuffer.stringBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}
    /*{{#each variables}}{{#if fmi}}{{#if local}}{{#if real}}
    fmiBuffer.realBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if local}}{{#if int}}
    fmiBuffer.intBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if local}}{{#if bool}}
    fmiBuffer.booleanBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}{{#each variables}}{{#if fmi}}{{#if local}}{{#if string}}
    fmiBuffer.stringBuffer[{{fmi.valueReference}}] = st.{{name}};{{/if}}{{/if}}{{/if}}{{/each}}*/
}

void terminate(){ }
