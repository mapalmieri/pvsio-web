require.config({
    baseUrl: "./",
       paths: {
        d3: "./lib/d3",
        "pvsioweb": "plugins/prototypebuilder",
        "imagemapper": "./lib/imagemapper",
        "text": "./lib/text",
        "lib": "./lib",
        "cm": "./lib/cm",
        stateParser: './util/PVSioStateParser',
        NCDevice: 'plugins/networkController/NCDevice'
    }
});

require([
    "widgets/TouchscreenButton",
    "widgets/BasicDisplay",
    "widgets/ButtonActionsQueue",
    "widgets/core/ButtonEVO",
    "widgets/LED",
    "widgets/TracingsDisplay",
    "widgets/med/PatientMonitorDisplay",
    "websockets/FMIClient"
], function (TouchscreenButton, BasicDisplay, ButtonActionsQueue,Button,
              LED,
              TracingsDisplay,
              PatientMonitorDisplay, FMIClient) {
    "use strict";
    // callback function
    var PVSioStateParser = require("util/PVSioStateParser");
    var system = {};
    // input widget
    {{#each elements}}
    system.{{id}} = new {{widget}}("{{id}}", {
        {{#if top}}top: {{top}}, {{/if}}
        {{#if left}}left: {{left}},{{/if}}
        {{#if height}}height: {{height}}, {{/if}}
        {{#if width}}width: {{width}} {{/if}}
    }, {
        {{#if borderRadius}}borderRadius: {{borderRadius}}, {{/if}}
        {{#if evts}} evts:['{{evts}}'], {{/if}}
		{{#if keyCode}}keyCode: {{keyCode}}, {{/if}}
		{{#if color}} backgroundColor: "{{color}}", {{/if}}
		{{#if callback}}callback: {{callback}} {{/if}}
    }, {
            parent: "image"
	});
    
    system.{{id}}.render();
    {{/each}}
	{{#each variables}}
	{{#if output}}	system.{{name}} = new {{widget}}("{{name}}",{
		
		{{#if left}}left: {{left}}, {{/if}}
		{{#if width}}width: {{width}}, {{/if}}
		{{#if top}}top: {{top}} {{/if}}
	},{
		{{#if color}} backgroundColor: "{{color}}", {{/if}}
	},{parent:"image"});
	system.{{name}}.render(); {{/if}}{{/each}}
	
	
	{{#each variables}}
	{{#if input}}	system.{{name}} = new {{widget}}("{{name}}",{
		
		{{#if left}}left: {{left}}, {{/if}}
		{{#if width}}width: {{width}}, {{/if}}
		{{#if top}}top: {{top}} {{/if}}
	},{
		{{#if color}} backgroundColor: "{{color}}", {{/if}}
	},{parent:"image"});
	system.{{name}}.render(); {{/if}}{{/each}}
    
    
    // utility function
        function evaluate(str) {
            var v = +str;
            if (str.indexOf("/") >= 0) {
                var args = str.split("/");
                v = +args[0] / +args[1];
            }
            return (v <= 0) ? "--" : ((v < 10) ? v.toFixed(1).toString() : v.toFixed(0).toString());
        }
    
    function onMessageReceived(err, res) {
		var state = {};
		state = PVSioStateParser.parse(res);
        {{#each variables}}
	{{#if output}}	system.{{name}}.render(PVSioStateParser.evaluate(state.{{name}})); {{/if}}
	{{#if input}}	system.{{name}}.render(PVSioStateParser.evaluate(state.{{name}})); {{/if}}{{/each}}
    }

	{{#each graphics}}
    d3.select("#submit_{{id}}").on("click", function () {
            var data = d3.select("#{{id}}").node().value;
            if (data) {
                data = (isNaN(parseFloat(data))) ? -1 : parseFloat(data);
                //stop_tick();
                ButtonActionsQueue.getInstance().queueGUIAction("{{id}}(" + data + ")", onMessageReceived);
                //start_tick(250);
            }
        });
	{{/each}}
    // web socket client
    var client = FMIClient.getInstance();
    client.port("8084");
    client.addListener("WebSocketConnectionOpened", function (res) {
        console.log("Connection opened!");
    }).addListener("WebSocketConnectionClosed", function (evt) {
        console.log("Connection closed :((");
    });
    //client.connectToServer();
     var tick;
        function start_tick(interval) {
            if (!tick) {
                tick = setInterval(function () {
                    ButtonActionsQueue.getInstance().queueGUIAction("tick", onMessageReceived);
                }, interval);
            }
        }
        function stop_tick() {
            if (tick) {
                clearInterval(tick);
                tick = null;
            }
        }
        start_tick(250);
});
