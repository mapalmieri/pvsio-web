require.config({
    baseUrl: "./",
    paths: { d3: "./lib", text: "./lib/text" }
});

require([
    "widgets/TouchscreenButton",
    "widgets/BasicDisplay",
    "widgets/ButtonActionsQueue",
    "websockets/FMIClient"
], function (TouchscreenButton, BasicDisplay, ButtonActionsQueue, FMIClient) {
    "use strict";
    // callback function
    var PVSioStateParser = require("util/PVSioStateParser");
    var system = {};
    // input widget
    {{#each elements}}
    system.{{id}} = new {{widget}}("{{id}}", {
        {{#if top}}top: {{top}}, {{/if}}
        {{#if left}}left: {{left}},{{/if}}
        {{#if height}}height: {{height}}, {{/if}}
        {{#if width}}width: {{width}} {{/if}}
    }, {
        {{#if borderRadius}}borderRadius: {{borderRadius}}, {{/if}}
        {{#if evts}} evts:['{{evts}}'], {{/if}}
		{{#if keyCode}}keyCode: {{keyCode}}, {{/if}}
		{{#if color}} backgroundColor: "{{color}}", {{/if}}
		{{#if callback}}callback: {{callback}} {{/if}}
    }, {
            parent: "image"
	});
    
    system.{{id}}.render();
    {{/each}}
	{{#each variables}}
	{{#if output}}	system.{{name}} = new {{widget}}("{{name}}",{
		
		{{#if left}}left: {{left}}, {{/if}}
		{{#if width}}width: {{width}}, {{/if}}
		{{#if top}}top: {{top}} {{/if}}
	},{
		{{#if color}} backgroundColor: "{{color}}", {{/if}}
	},{parent:"image"});
	system.{{name}}.render(); {{/if}}{{/each}}
	
	
	{{#each variables}}
	{{#if input}}	system.{{name}} = new {{widget}}("{{name}}",{
		
		{{#if left}}left: {{left}}, {{/if}}
		{{#if width}}width: {{width}}, {{/if}}
		{{#if top}}top: {{top}} {{/if}}
	},{
		{{#if color}} backgroundColor: "{{color}}", {{/if}}
	},{parent:"image"});
	system.{{name}}.render(); {{/if}}{{/each}}
    
    function onMessageReceived(err, res) {
		var state = {};
		state = PVSioStateParser.parse(res);
        {{#each variables}}
	{{#if output}}	system.{{name}}.render(PVSioStateParser.evaluate(state.{{name}})); {{/if}}
	{{#if input}}	system.{{name}}.render(PVSioStateParser.evaluate(state.{{name}})); {{/if}}{{/each}}
    }

    // web socket client
    var client = FMIClient.getInstance();
    client.port("8084");
    client.addListener("WebSocketConnectionOpened", function (res) {
        console.log("Connection opened!");
    }).addListener("WebSocketConnectionClosed", function (evt) {
        console.log("Connection closed :((");
    });
    //client.connectToServer();
     var tick;
        function start_tick(interval) {
            if (!tick) {
                tick = setInterval(function () {
                    ButtonActionsQueue.getInstance().queueGUIAction("tick", onMessageReceived);
                }, interval);
            }
        }
        function stop_tick() {
            if (tick) {
                clearInterval(tick);
                tick = null;
            }
        }
        start_tick(250);
});
