{{&descriptor}}

/**
 * Example main for testing {{filename}}.c
 */

#include "{{filename}}.h"
#include <stdio.h>
#include <string.h>
#define NUM_OF_FUNC {{transitions.length}}


int main(){
    char_t *MachineState[] = { {{#each states~}}(char_t*)"{{name}}"{{#unless @last}}, {{/unless}}{{/each}} };   // Useful for printf()
    /*
     * At first instantiate state variable and call init() in order to initialise it as follow:
     */
    state s;
    init(&s);
    printf("Initialised, current state: %s \n-------\n", MachineState[s.current_state]);

    /*
     * Example generated in order to call all the functions
     * with the use of a menu to select the required function
     * (this example uses the standard output stream, it is illustrative purposes only)
     */

    char *function_name[] = { {{#each transitions}}"{{#if id}}{{id}}{{else}}{{0.id}}{{/if}}"{{#unless @last}}, {{/unless}}{{/each}} };   ///< Useful for printf()
    int t, i;
    printf("List of function that can be tested:\n");
    for(i = 1; i <= NUM_OF_FUNC; i++){
        printf("%d - %s\n", i, function_name[i-1]);
    }
     while(1){
        printf("Enter number of transition to be issued (enter 0 to exit): ");
        if( scanf("%d",&t) != 1 ){
            fprintf( stderr, "Expected a numbers as input\n");
            return 1;
        }
        t--;
        printf("\n");
        if ( (t < 0) || (t >= NUM_OF_FUNC) ){
            printf("Wrong input\n");
            return 1;
        }
        /*
        * Note: It is necessary to check the permission function before executing a transition (otherwise an assertion error will be generated by the transition)
        */
        {{#each transitions}}else if (strcmp(function_name[t], "{{#if id}}{{id}}{{else}}{{0.id}}{{/if}}") == 0){
            if (per_{{#if id}}{{id}}{{else}}{{0.id}}{{/if}}(&s)) {
                {{#if id}}{{id}}{{else}}{{0.id}}{{/if}}(&s);
                printf("Press %s: current state: %s previous state: %s \n", function_name[t], MachineState[s.current_state], MachineState[s.previous_state]);
            }
            else {
                printf("Permission to %s function denied\n", function_name[t]);
            }
        }
        {{/each}}
        else{
            return 1;
        }
    }
    return 0;
}

{{&disclaimer}}
