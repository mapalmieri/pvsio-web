;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Filename: pvs-strategies
;; Description: Strategies for proving theorems
;;              formulated using structural induction
;; Date: Jan 20, 2017
;; Author: Paolo Masci
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;------------------------------------------------
;; Strategy grind_{{theorem}} is the basic strategy
;; for proving theorems formulated using structural induction.
;; The strategy splits the theorem into two branches:
;; Induction base, and Induction step.
;; Proof of the induction base is attempted using (grind).
;; Proof of the induction step involves expanding all permission functions,
;; then case splitting, and finally applying (grind) to all branches.
;; Option :if-match nil instructs grind to avoid guessing
;; instantiation for existential quantifiers (if any).
;;------------------------------------------------
(defstrat grind_{{theorem}} ()
  (then
    (rewrite-msg-off)
    (skosimp*)
    (branch (prop)
	 ((then (comment "induction base")
	        (try (grind :if-match nil) (propax) (postpone)))
	  (then (comment "inductive step")
	        (expand "{{transition_relation}}"){{#each transition_names}}
	        (expand "per_{{this}}"){{/each}}
	        (prop)
	        (try (grind :if-match nil) (propax) (postpone))))
    )
  )
  "Strategy grind_{{theorem}} splits the theorem into two branches: induction base and induction step. Proof of the induction base is attempted using (grind). Proof of the induction step involves expanding all relevant definitions, case splitting, and applying (grind) to all branches."
  "Skolemizing, expanding definitions, case-splitting, then grinding."
)
