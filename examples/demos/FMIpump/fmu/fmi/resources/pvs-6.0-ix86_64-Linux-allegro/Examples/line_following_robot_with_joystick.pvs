line_following_robot_with_joystick: THEORY
 BEGIN 
  %-- user-defined constants
  LSR_THRESHOLD: real = 400.0

  %-- user-defined datatypes
  CommandSpeed: TYPE = { x: real | x >= -10 AND x <= 10 }
  
  IDLE: CommandSpeed = 0
  MAX_CW_SPEED: CommandSpeed = 10
  MAX_CCW_SPEED: CommandSpeed = -10
  
  inc_CW_speed(s: CommandSpeed, x: nonneg_real): CommandSpeed =
   IF s + x < MAX_CW_SPEED THEN s + x ELSE MAX_CW_SPEED ENDIF

  inc_CCW_speed(s: CommandSpeed, x: nonneg_real): CommandSpeed =
   IF s - x > MAX_CCW_SPEED THEN s - x ELSE MAX_CCW_SPEED ENDIF

  dec_speed(s: CommandSpeed, x: nonneg_real): CommandSpeed =
   COND
    s >= IDLE -> IF s - x > IDLE THEN s - x ELSE IDLE ENDIF,
    s < IDLE ->  IF s + x < IDLE THEN s + x ELSE IDLE ENDIF
   ENDCOND


  %-- operating modes
  Mode: TYPE = { Auto, Manual }

  %-- state attributes
  State: TYPE = [#
    mode: Mode,
    previous_mode: Mode,
    backwardRotate: CommandSpeed,
    forwardRotate: CommandSpeed,
    forwardSpeed: CommandSpeed,
    lfLeftVal: real,
    lfRightVal: real,
    servoLeftVal: CommandSpeed,
    servoRightVal: CommandSpeed
  #]

  %-- init function
  init: State = (#
    previous_mode := Auto, 
    mode := Auto, 
    backwardRotate := 1.0, 
    forwardRotate := 5.0, 
    forwardSpeed := 4.0, 
    lfLeftVal := 0.0, 
    lfRightVal := 0.0, 
    servoLeftVal := 0.0, 
    servoRightVal := 0.0
  #)

  %-- leave/enter functions
  enter(m: Mode)(st: State): State = st WITH [ mode := m ]
  leave(m: Mode)(st: State): State = st WITH [ previous_mode := m ]

  %-- triggers
  per_accellerate(st: State): bool = (mode(st) = Auto AND ( true ))
    OR (mode(st) = Manual AND ( true ))
  accellerate(st: (per_accellerate)): State =
    COND
     mode(st) = Auto AND ( true )
      -> LET st = leave(Auto)(st),
             st = st WITH [ servoLeftVal := inc_CW_speed(servoLeftVal(st),0.1) ],
             st = st WITH [ servoRightVal := inc_CCW_speed(servoRightVal(st),0.1) ]
          IN enter(Manual)(st),
     mode(st) = Manual AND ( true )
      -> LET st = leave(Manual)(st),
             st = st WITH [ servoLeftVal := inc_CW_speed(servoLeftVal(st),0.1) ],
             st = st WITH [ servoRightVal := inc_CCW_speed(servoRightVal(st),0.1) ]
          IN enter(Manual)(st),
     ELSE -> st
    ENDCOND

  per_autopilot(st: State): bool = (mode(st) = Manual AND ( true ))
  autopilot(st: (per_autopilot)): State =
    COND
     mode(st) = Manual AND ( true )
      -> LET st = leave(Manual)(st),
             st = st WITH [ servoLeftVal := servoLeftVal(st) ],
             st = st WITH [ servoRightVal := servoRightVal(st) ]
          IN enter(Auto)(st),
     ELSE -> st
    ENDCOND

  per_brake(st: State): bool = (mode(st) = Manual AND ( true ))
    OR (mode(st) = Auto AND ( true ))
  brake(st: (per_brake)): State =
    COND
     mode(st) = Manual AND ( true )
      -> LET st = leave(Manual)(st),
             st = st WITH [ servoLeftVal := dec_speed(servoLeftVal(st),0.1) ],
             st = st WITH [ servoRightVal :=  dec_speed(servoRightVal(st),0.1) ]
          IN enter(Manual)(st),
     mode(st) = Auto AND ( true )
      -> LET st = leave(Auto)(st),
             st = st WITH [ servoLeftVal := dec_speed(servoLeftVal(st),0.1) ],
             st = st WITH [ servoRightVal := dec_speed(servoRightVal(st),0.1) ]
          IN enter(Manual)(st),
     ELSE -> st
    ENDCOND

  per_tick(st: State): bool = (mode(st) = Auto AND ( lfRightVal(st) < LSR_THRESHOLD AND lfLeftVal(st) < LSR_THRESHOLD ))
    OR (mode(st) = Auto AND ( lfRightVal(st) < LSR_THRESHOLD AND lfLeftVal(st) > LSR_THRESHOLD ))
    OR (mode(st) = Auto AND ( lfRightVal(st) > LSR_THRESHOLD AND lfLeftVal(st) < LSR_THRESHOLD ))
    OR (mode(st) = Manual AND ( true ))
  tick(st: (per_tick)): State =
    COND
     mode(st) = Auto AND ( lfRightVal(st) < LSR_THRESHOLD AND lfLeftVal(st) < LSR_THRESHOLD )
      -> LET st = leave(Auto)(st),
             st = st WITH [ servoLeftVal := forwardSpeed(st) ],
             st = st WITH [ servoRightVal := - forwardSpeed(st) ]
          IN enter(Auto)(st),
     mode(st) = Auto AND ( lfRightVal(st) < LSR_THRESHOLD AND lfLeftVal(st) > LSR_THRESHOLD )
      -> LET st = leave(Auto)(st),
             st = st WITH [ servoLeftVal := backwardRotate(st) ],
             st = st WITH [ servoRightVal := - forwardRotate(st) ]
          IN enter(Auto)(st),
     mode(st) = Auto AND ( lfRightVal(st) > LSR_THRESHOLD AND lfLeftVal(st) < LSR_THRESHOLD )
      -> LET st = leave(Auto)(st),
             st = st WITH [ servoLeftVal := forwardRotate(st) ],
             st = st WITH [ servoRightVal := - backwardRotate(st) ]
          IN enter(Auto)(st),
     mode(st) = Manual AND ( true )
      -> LET st = leave(Manual)(st),
             st = st WITH [ servoLeftVal := servoLeftVal(st) ],
             st = st WITH [ servoRightVal := servoRightVal(st) ]
          IN enter(Manual)(st),
     ELSE -> st
    ENDCOND

  per_turnLeft(st: State): bool = (mode(st) = Auto AND ( true ))
    OR (mode(st) = Manual AND ( true ))
  turnLeft(st: (per_turnLeft)): State =
    COND
     mode(st) = Auto AND ( true )
      -> LET st = leave(Auto)(st),
             st = st WITH [ servoLeftVal := inc_CCW_speed(servoLeftVal(st),0.05) ],
             st = st WITH [ servoRightVal := inc_CCW_speed(servoRightVal(st),0.05) ]
          IN enter(Manual)(st),
     mode(st) = Manual AND ( true )
      -> LET st = leave(Manual)(st),
             st = st WITH [ servoLeftVal := inc_CCW_speed(servoLeftVal(st),0.05) ],
             st = st WITH [ servoRightVal := inc_CCW_speed(servoRightVal(st),0.05) ]
          IN enter(Manual)(st),
     ELSE -> st
    ENDCOND

  per_turnRight(st: State): bool = (mode(st) = Auto AND ( true ))
    OR (mode(st) = Manual AND ( true ))
  turnRight(st: (per_turnRight)): State =
    COND
     mode(st) = Auto AND ( true )
      -> LET st = leave(Auto)(st),
             st = st WITH [ servoLeftVal := inc_CW_speed(servoLeftVal(st),0.05) ],
             st = st WITH [ servoRightVal := inc_CW_speed(servoLeftVal(st),0.05) ]
          IN enter(Manual)(st),
     mode(st) = Manual AND ( true )
      -> LET st = leave(Manual)(st),
             st = st WITH [ servoLeftVal := inc_CW_speed(servoLeftVal(st),0.05) ],
             st = st WITH [ servoRightVal := inc_CW_speed(servoLeftVal(st),0.05) ]
          IN enter(Manual)(st),
     ELSE -> st
    ENDCOND

 END line_following_robot_with_joystick
