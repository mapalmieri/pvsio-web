(line_following_robot_arduino
 (press_accelerate_TCC1 0
  (press_accelerate_TCC1-1 nil 3753178964 ("" (tcc))
   ((per_accellerate const-decl "bool"
     line_following_robot_Arduino_for_FMI nil))
   nil))
 (press_brake_TCC1 0
  (press_brake_TCC1-1 nil 3753178964 ("" (tcc))
   ((per_brake const-decl "bool" line_following_robot_Arduino_for_FMI
     nil))
   nil))
 (press_right_TCC1 0
  (press_right_TCC1-1 nil 3753178964 ("" (tcc))
   ((per_turnRight const-decl "bool"
     line_following_robot_Arduino_for_FMI nil))
   nil))
 (press_left_TCC1 0
  (press_left_TCC1-1 nil 3753178964 ("" (tcc))
   ((per_turnLeft const-decl "bool"
     line_following_robot_Arduino_for_FMI nil))
   nil))
 (kth_step_TCC1 0
  (kth_step_TCC1-1 nil 3752999841 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (kth_step_TCC2 0 (kth_step_TCC2-1 nil 3752999841 ("" (tcc)) nil nil))
 (kth_step_TCC3 0
  (kth_step_TCC3-1 nil 3752999841 ("" (tcc))
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (per_tick const-decl "bool" line_following_robot_Arduino_for_FMI
     nil))
   nil))
 (no_shortcircuits 0
  (no_shortcircuits-1 nil 3752999864
   ("" (induct K)
    (("1" (grind) nil nil) ("2" (grind) nil nil) ("3" (grind) nil nil))
    nil)
   ((leave const-decl "State" line_following_robot_Arduino_for_FMI nil)
    (enter const-decl "State" line_following_robot_Arduino_for_FMI nil)
    (tick const-decl "State" line_following_robot_Arduino_for_FMI nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (init const-decl "State" line_following_robot_Arduino_for_FMI nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (kth_step def-decl "State" line_following_robot_arduino nil)
    (State type-eq-decl nil line_following_robot_Arduino_for_FMI nil)
    (Mode type-decl nil line_following_robot_Arduino_for_FMI nil)
    (LightSensorReading type-eq-decl nil
     line_following_robot_Arduino_for_FMI nil)
    (Speed type-eq-decl nil line_following_robot_Arduino_for_FMI nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (always_auto 0
  (always_auto-2 "" 3753011508
   ("" (induct K) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((leave const-decl "State" line_following_robot_Arduino_for_FMI nil)
    (enter const-decl "State" line_following_robot_Arduino_for_FMI nil)
    (tick const-decl "State" line_following_robot_Arduino_for_FMI nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (init const-decl "State" line_following_robot_Arduino_for_FMI nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (Auto adt-constructor-decl "(Auto?)"
     line_following_robot_Arduino_for_FMI nil)
    (Auto? adt-recognizer-decl "[Mode -> boolean]"
     line_following_robot_Arduino_for_FMI nil)
    (kth_step def-decl "State" line_following_robot_arduino nil)
    (State type-eq-decl nil line_following_robot_Arduino_for_FMI nil)
    (LightSensorReading type-eq-decl nil
     line_following_robot_Arduino_for_FMI nil)
    (Speed type-eq-decl nil line_following_robot_Arduino_for_FMI nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Mode type-decl nil line_following_robot_Arduino_for_FMI nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (always_auto-1 nil 3752999895
   ("" (induct K) (("1" (grind) nil nil) ("2" (grind) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (init const-decl "State" line_following_robot_Arduino_for_FMI nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (enter const-decl "State" line_following_robot_Arduino_for_FMI nil)
    (leave const-decl "State" line_following_robot_Arduino_for_FMI nil)
    (tick const-decl "State" line_following_robot_Arduino_for_FMI nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (Auto adt-constructor-decl "(Auto?)"
     line_following_robot_Arduino_for_FMI nil)
    (Auto? adt-recognizer-decl "[Mode -> boolean]"
     line_following_robot_Arduino_for_FMI nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (kth_step def-decl "State" line_following_robot_arduino nil)
    (State type-eq-decl nil line_following_robot_Arduino_for_FMI nil)
    (Mode type-decl nil line_following_robot_Arduino_for_FMI nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak)))

