{{#if initial_transitions}}/* definition of initialisation function */
state init(state *st){
    #ifdef DEBUG
    debug_print("Initialisation of state variables.\n");
    #endif
    {{#each ../local_variables}}{{#if value}}{{#if isstring}}{{&value}}{{else}}st->{{name}} = {{&value}}{{/if}};
    {{/if}}{{/each}}
    {{~#each ../input_variables}}{{#if value}}st->{{name}} = {{&value}};
    {{/if}}{{/each}}
    {{~#each ../output_variables}}{{#if value}}st->{{name}} = {{&value}};
    {{/if}}{{/each}}
    {{~#each initial_transitions}}
    {{~#if condition}}if ({{&condition}}) {
        enter({{target.name}}, st);
        {{#each actions}}{{&.}};
        #ifdef DEBUG
        debug_print("Action {{&.}} issued.\n");
        #endif{{/each}}
        assert ( st->current_state == {{target.name}} );
        return *st;
    }
    {{else}}enter({{target.name}}, st);
    {{#each actions}}{{&.}};
    #ifdef DEBUG
    debug_print("Action {{&.}} issued.\n");
    #endif{{/each}}
    assert ( st->current_state == {{target.name}} );
    return *st;{{/if}}{{/each}}
}{{/if}}
