robotUI: THEORY
 BEGIN

  %-- cruise control
  CruiseControl: TYPE = { AUTO, MANUAL }

  %-- light sensors
  LightSensorReading: TYPE = { x: nonneg_real | x <= 255 }
  LightSensors: TYPE = [#
    left: LightSensorReading,
    right: LightSensorReading
  #]
  Color: TYPE = { WHITE, BLACK }

  %-- motor
  Speed: TYPE = { x: real | x >= -1 AND x <= 1 }
  MotorSpeed: TYPE = [#
    left: Speed,
    right: Speed
  #]
  IDLE: Speed = 0
  MAX_CW_SPEED: Speed = 1
  MAX_CCW_SPEED: Speed = -1

  %-- gears
  Gear: TYPE = { DRIVE, REVERSE, NEUTRAL }

  %-- utility functions for setting clockwise/counterclockwise motor rotation speed (low-level APIs)
  inc_CW_speed(s: Speed, x: nonneg_real): Speed =
   IF s + x < MAX_CW_SPEED THEN s + x ELSE MAX_CW_SPEED ENDIF

  inc_CCW_speed(s: Speed, x: nonneg_real): Speed =
   IF s - x > MAX_CCW_SPEED THEN s - x ELSE MAX_CCW_SPEED ENDIF

  dec_speed(s: Speed, x: nonneg_real): Speed =
   COND
    s >= IDLE -> IF s - x > IDLE THEN s - x ELSE IDLE ENDIF,
    s < IDLE ->  IF s + x < IDLE THEN s + x ELSE IDLE ENDIF
   ENDCOND

  %-- user interface state
  State: TYPE =
        [#  lightSensors: LightSensors,
            motorSpeed: MotorSpeed,
			gear: Gear,
			timesteps: real,
			interval: real,
            cc: CruiseControl #]

  init_state: State =
      (# lightSensors := (# left := 0, right := 0 #),
         motorSpeed := (# left := IDLE, right := IDLE #),
		 gear := DRIVE,
		 timesteps := 0,
		 interval := NRANDOM(500)+1, %+1 because we need to avoid 0
         cc := AUTO #)

  update_left_motor_speed(st: State): Speed =
   LET ls = lightSensors(st) IN
     COND ls`right > 150 AND ls`left > 150 -> 0.4,
          ls`right < 150 AND ls`left > 150 -> 0.5,
          ls`right > 150 AND ls`left < 150 -> 0.1,
          ELSE -> motorSpeed(st)`left ENDCOND

  update_right_motor_speed(st: State): Speed =
   LET ls = lightSensors(st) IN  
     COND ls`right > 150 AND ls`left > 150 -> -0.4,
          ls`right < 150 AND ls`left > 150 -> -0.1,
          ls`right > 150 AND ls`left < 150 -> -0.5,
          ELSE -> motorSpeed(st)`right ENDCOND

attack(st: State): State = 
   IF timesteps(st) = interval(st) THEN st
		WITH [motorSpeed := (# left := 0,
                             right := 0 #),
                             timesteps := 0,
                             interval := NRANDOM(20)+1 %+1 because we need to avoid 0 
              ]   
     ELSE st
     ENDIF
     
attack1(st: State): State = 
    IF timesteps(st) > interval(st)
		THEN st		WITH [lightSensors := (# left := 140,
                             right := st`lightSensors`right #)                             
              ]
        ELSE st   
     ENDIF

  tick(st: State): State =
      IF cc(st) = AUTO
        THEN st WITH [motorSpeed
                       := (# left := update_left_motor_speed(st),
                             right := update_right_motor_speed(st) #),
                       timesteps:= timesteps(st)+1      
                             ]
      ELSE st WITH [ timesteps:= timesteps(st)+1      
                             ]
      ENDIF
      
      fmi_tick1(st:State):State =
      LET state:State = attack1(st)
      IN tick(state)
      
      fmi_tick(st:State):State =
      LET state:State = tick(st)
      IN attack(state)
      
   
     
  center_drive_direction(st: State): State =
    LET m: Speed = min(abs(motorSpeed(st)`left), abs(motorSpeed(st)`right))
     IN st WITH [ motorSpeed
                := (# left := COND
		        gear(st) = DRIVE OR gear(st) = NEUTRAL -> m,
			gear(st) = REVERSE -> -m ENDCOND,
                      right := COND
		        gear(st) = DRIVE OR gear(st) = NEUTRAL -> -m,
			gear(st) = REVERSE -> m ENDCOND #)]

  %-- user actions
  autopilot_on(st: State): State = st WITH [ cc := AUTO ]
  autopilot_off(st: State): State =
   LET st = IF cc(st) = AUTO THEN center_drive_direction(st) ELSE st ENDIF
    IN st WITH [ cc := MANUAL ]
  
  ACC_STEP: Speed = 0.1
  accelerate(st: State): State =
   LET st = autopilot_off(st)
    IN st
        WITH [cc := MANUAL,
              motorSpeed
                := (# left := COND
		        gear(st) = DRIVE -> inc_CW_speed(motorSpeed(st)`left, ACC_STEP),
			gear(st) = REVERSE -> inc_CCW_speed(motorSpeed(st)`left, ACC_STEP),
			gear(st) = NEUTRAL -> motorSpeed(st)`left ENDCOND,
                      right := COND
		        gear(st) = DRIVE -> inc_CCW_speed(motorSpeed(st)`right, ACC_STEP),
			gear(st) = REVERSE -> inc_CW_speed(motorSpeed(st)`right, ACC_STEP),
			gear(st) = NEUTRAL -> motorSpeed(st)`right ENDCOND #)]

  BRAKE_STEP: Speed = 0.1
  brake(st: State): State =
   LET st = autopilot_off(st)
    IN st WITH [cc := MANUAL,
              motorSpeed
                := (# left := dec_speed(motorSpeed(st)`left, BRAKE_STEP),
                      right := dec_speed(motorSpeed(st)`right, BRAKE_STEP) #)]

  TURN_SPEED: Speed = 0.08
  right(st: State): State =
   LET st = autopilot_off(st)
    IN st WITH [cc := MANUAL,
              motorSpeed
                := (# left := COND
		        gear(st) = DRIVE OR gear(st) = REVERSE -> inc_CW_speed(motorSpeed(st)`left, TURN_SPEED),
			ELSE -> motorSpeed(st)`left ENDCOND,
                      right := COND
		        gear(st) = DRIVE OR gear(st) = REVERSE -> inc_CW_speed(motorSpeed(st)`right, TURN_SPEED),
			ELSE -> motorSpeed(st)`right ENDCOND #)]

  left(st: State): State =
   LET st = autopilot_off(st)
    IN st WITH [cc := MANUAL,
              motorSpeed
                := (# left := COND
		        gear(st) = DRIVE OR gear(st) = REVERSE -> inc_CCW_speed(motorSpeed(st)`left, TURN_SPEED),
			ELSE -> motorSpeed(st)`left ENDCOND,
                      right := COND
		        gear(st) = DRIVE OR gear(st) = REVERSE -> inc_CCW_speed(motorSpeed(st)`right, TURN_SPEED),
			ELSE -> motorSpeed(st)`right ENDCOND #)]

  gear_drive(st: State): State = autopilot_off(st) WITH [ gear := DRIVE ]
  gear_reverse(st: State): State = autopilot_off(st) WITH [ gear := REVERSE ]
  gear_neutral(st: State): State = autopilot_off(st) WITH [ gear := NEUTRAL ]


 END robotUI
