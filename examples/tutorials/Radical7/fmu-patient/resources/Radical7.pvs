Radical7: THEORY
 BEGIN

  Alarm: TYPE = { off, mute, alarm }

  state: TYPE = [#
    id: string,
    spo2: real, % sensor data - blood oxigenation level (percentage)
    spo2_max: nonneg_real,
    spo2_min: nonneg_real,
    spo2_label: string,
    spo2_alarm: Alarm,
    spo2_fail: bool,
    HR: real, % sensor data - acoustic respiratory rate (breaths per minute, bpm)
    HR_max: nonneg_real,
    HR_min: nonneg_real,
    HR_label: string,
    HR_alarm: Alarm,
    HR_fail: bool,
    isOn: bool
  #]

  init(x: real): state = (#
    id := "Radical7",
    spo2 := 99,
    spo2_max := 0,
    spo2_min := 88,
    spo2_label := "SpO2",
    spo2_alarm := off,
    spo2_fail := false,
    HR := 80,
    HR_max := 100,
    HR_min := 60,
    HR_label := "HR",
    HR_alarm := off,
    HR_fail := false,
    isOn := true
  #)

  init(x: real, id: string): state = (#
    id := id,
    spo2 := 99,
    spo2_max := 0,
    spo2_min := 88,
    spo2_label := "SpO2",
    spo2_alarm := off,
    spo2_fail := false,
    HR := 80,
    HR_max := 100,
    HR_min := 60,
    HR_label := "HR",
    HR_alarm := off,
    HR_fail := false,
    isOn := true
  #)


  per_on(st: state): bool = true
  on(st: (per_on)): state = st WITH [ isOn := NOT isOn(st) ]
  click_btn_on(st: state): state =
    COND
      per_on(st) -> on(st),
      ELSE -> st
    ENDCOND

  click_btn_mute(st: state): state =
    COND
      isOn(st) AND spo2_alarm(st) = alarm -> st WITH [ spo2_alarm := mute ],
      ELSE -> st
    ENDCOND

  check_spo2(st: state): state =
    IF spo2_fail(st) = FALSE THEN
        IF ((spo2_max(st) > 0) AND (spo2(st) >= spo2_max(st))) OR
    	((spo2_min(st) > 0) AND (spo2(st) <= spo2_min(st)))
	    THEN st WITH [ spo2_alarm := alarm ]
	    ELSE st WITH [ spo2_alarm := off ] ENDIF
    ELSE st WITH [ spo2_alarm := alarm ] ENDIF

  check_HR(st: state): state =
    IF HR_fail(st) = FALSE THEN
        IF ((HR_max(st) > 0) AND (HR(st) >= HR_max(st))) OR
    	((HR_min(st) > 0) AND (HR(st) <= HR_min(st)))
	    THEN st WITH [ HR_alarm := alarm ]
	    ELSE st WITH [ HR_alarm := off ] ENDIF
    ELSE st WITH [ HR_alarm := alarm ] ENDIF

  check_vitals(st: state): state =
    LET st = check_spo2(st)
     IN check_HR(st)

  tick(st: state): state =
    COND
      isOn(st) -> check_vitals(st),
      ELSE -> st
    ENDCOND
  
  spo2_sensor_data(x: real)(st: state): state =
    st WITH [ spo2 := x, spo2_fail := FALSE ]

  HR_sensor_data(x: real)(st: state): state =
    st WITH [ HR := x, HR_fail := FALSE ]

 END Radical7

